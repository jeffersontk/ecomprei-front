generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model ImageUrl {
  id        String   @id @default(uuid())
  url       String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model variantProduct {
  id        String   @id @default(uuid())
  variant   String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model sizeProduct {
  id        String   @id @default(uuid())
  size      String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model paragrapher {
  id            String      @id @default(uuid())
  message       String      @db.LongText()
  copyProduct   copyProduct @relation(fields: [copyProductId], references: [id])
  copyProductId String
}

model copyProduct {
  id         String        @id @default(uuid())
  paragraphs paragrapher[]
  product    Product?      @relation(fields: [productId], references: [id])
  productId  String
}

model Product {
  id              String           @id @default(uuid())
  title           String
  price           Float
  discount        Int?
  shipping        String
  sizes           sizeProduct[]
  variants        variantProduct[]
  category        String
  subCategory     String?
  shopUrl         String
  ImageUrl        String
  videoUrl        String?
  thumbnailUrl    String?
  variantsImage   ImageUrl[]
  status          Boolean
  highlighted     Boolean?
  stripeProductId String?
  copies          copyProduct[]
  comments        Comment[]
}

model Comment {
  id         String   @id @default(uuid())
  authorName String
  createdAt  DateTime @default(now())
  comment    String   @db.LongText()
  Product    Product? @relation(fields: [productId], references: [id])
  productId  String?
  starRating Float
}

model CheckoutSession {
  id                      String               @id @default(uuid())
  stripeCheckoutSessionId String
  clientName              String
  clientEmail             String
  clientPhone             String
  clientAddress           ClientAddress        @relation(fields: [clientAddressId], references: [id])
  clientAddressId         String
  productComplement       String
  productsInCheckout      ProductsInCheckout[]
  status                  String
}

model ClientAddress {
  id              String            @id @default(uuid())
  city            String
  country         String
  line1           String
  line2           String?
  postal_code     String
  state           String
  CheckoutSession CheckoutSession[]
}

model ProductsInCheckout {
  id                String           @id @default(uuid())
  name              String
  imageUrl          String
  CheckoutSession   CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])
  checkoutSessionId String?
}

model User {
  id                Int             @id @default(autoincrement())
  username          String          @unique
  name              String
  email             String          @unique
  password          String
  permissionLevel   PermissionLevel @default(vendedor)
  sessionId         String?
  sessionExpiration DateTime?

  @@map(name: "users")
}

enum PermissionLevel {
  admin
  vendedor
}
